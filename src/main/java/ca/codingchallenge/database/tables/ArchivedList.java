/*
 * This file is generated by jOOQ.
*/
package codingchallenge.database.tables;


import codingchallenge.database.Indexes;
import codingchallenge.database.Keys;
import codingchallenge.database.Public;
import codingchallenge.database.tables.records.ArchivedListRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ArchivedList extends TableImpl<ArchivedListRecord> {

    private static final long serialVersionUID = 764217394;

    /**
     * The reference instance of <code>public.archived_list</code>
     */
    public static final ArchivedList ARCHIVED_LIST = new ArchivedList();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ArchivedListRecord> getRecordType() {
        return ArchivedListRecord.class;
    }

    /**
     * The column <code>public.archived_list.id</code>.
     */
    public final TableField<ArchivedListRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('archived_list_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.archived_list.name</code>.
     */
    public final TableField<ArchivedListRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.archived_list.statement</code>.
     */
    public final TableField<ArchivedListRecord, String> STATEMENT = createField("statement", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.archived_list.archive_date</code>.
     */
    public final TableField<ArchivedListRecord, String> ARCHIVE_DATE = createField("archive_date", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>public.archived_list</code> table reference
     */
    public ArchivedList() {
        this(DSL.name("archived_list"), null);
    }

    /**
     * Create an aliased <code>public.archived_list</code> table reference
     */
    public ArchivedList(String alias) {
        this(DSL.name(alias), ARCHIVED_LIST);
    }

    /**
     * Create an aliased <code>public.archived_list</code> table reference
     */
    public ArchivedList(Name alias) {
        this(alias, ARCHIVED_LIST);
    }

    private ArchivedList(Name alias, Table<ArchivedListRecord> aliased) {
        this(alias, aliased, null);
    }

    private ArchivedList(Name alias, Table<ArchivedListRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ARCHIVED_LIST_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ArchivedListRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ARCHIVED_LIST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ArchivedListRecord> getPrimaryKey() {
        return Keys.ARCHIVED_LIST_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ArchivedListRecord>> getKeys() {
        return Arrays.<UniqueKey<ArchivedListRecord>>asList(Keys.ARCHIVED_LIST_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ArchivedList as(String alias) {
        return new ArchivedList(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ArchivedList as(Name alias) {
        return new ArchivedList(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ArchivedList rename(String name) {
        return new ArchivedList(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ArchivedList rename(Name name) {
        return new ArchivedList(name, null);
    }
}
